# -*- coding: utf-8 -*-
"""3_Resize_4_Normalization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PdvH9S0L2ktDPER_f1J5pE0MZF9qNhlS
"""

"""# Task
Resize all images in the directory "images" to 224x224 and save them to a new directory "resized_images".

## Install necessary libraries

### Subtask:
Install libraries for image processing (e.g., OpenCV or PIL).

**Reasoning**:
Install the Pillow library using pip.
"""


"""## Load images

### Subtask:
Load the images from the specified directory.

**Reasoning**:
Define the directory path, list files, and filter for image files to get a list of image paths.
"""

import os

image_dir = '/content/drive/MyDrive/Tomato/NewFolder/Augmented_Tomato_Dataset'
image_files = [f for f in os.listdir(image_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
image_paths = [os.path.join(image_dir, f) for f in image_files]

print(f"Found {len(image_paths)} image files.")

"""**Reasoning**:
The previous attempt found 0 image files. I need to investigate the directory structure to find the correct path to the image files. I will list the directories and files within the main augmented dataset directory.


"""

import os

base_dir = '/content/drive/MyDrive/Tomato/NewFolder/Augmented_Tomato_Dataset'
print(os.listdir(base_dir))

"""**Reasoning**:
The output shows that the images are located in subdirectories within 'Augmented_Tomato_Dataset', categorized by disease. I need to iterate through these subdirectories to collect all image file paths.


"""

import os

base_dir = '/content/drive/MyDrive/Tomato/NewFolder/Augmented_Tomato_Dataset'
image_paths = []
for subdir in os.listdir(base_dir):
    subdir_path = os.path.join(base_dir, subdir)
    if os.path.isdir(subdir_path):
        for f in os.listdir(subdir_path):
            if f.lower().endswith(('.png', '.jpg', '.jpeg')):
                image_paths.append(os.path.join(subdir_path, f))

print(f"Found {len(image_paths)} image files.")

"""## Resize images

### Subtask:
Iterate through the loaded images and resize each one to 224x224.

**Reasoning**:
Iterate through the loaded image paths, resize each image to 224x224, and save them to the new directory while maintaining the original subdirectory structure.
"""

from PIL import Image
import os

resized_dir = os.path.join(base_dir, 'resized_images')
os.makedirs(resized_dir, exist_ok=True)

for image_path in image_paths:
    try:
        img = Image.open(image_path)
        img_resized = img.resize((224, 224))

        # Construct save path while preserving subdirectory structure
        relative_path = os.path.relpath(image_path, base_dir)
        save_path = os.path.join(resized_dir, relative_path)

        # Ensure the subdirectory for the resized image exists
        save_subdir = os.path.dirname(save_path)
        os.makedirs(save_subdir, exist_ok=True)

        img_resized.save(save_path)
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")

print("Image resizing complete.")

"""## Save resized images

### Subtask:
Save the resized images to a new directory.

## Summary:

### Data Analysis Key Findings

*   A total of 10811 image files were found within the subdirectories of the specified base directory.
*   The Pillow library, required for image processing, was already installed in the environment.
*   All found images were successfully resized to 224x224 pixels.
*   The resized images were saved to a new directory named `resized_images` within the base directory, maintaining the original subdirectory structure.

### Insights or Next Steps

*   The resized dataset is now ready for use in tasks such as training a machine learning model for image classification.
*   Consider verifying the integrity of the resized images and their corresponding labels if they are intended for a supervised learning task.

# Task
Resize images to 224x224 and apply min-max normalization.

## Load resized images

### Subtask:
Load the resized images from the 'resized_images' directory.

**Reasoning**:
Define the directory for resized images, traverse it to find all image files, and store their paths in a list.
"""

import os

resized_dir = '/content/drive/MyDrive/Tomato/NewFolder/Augmented_Tomato_Dataset/resized_images'
resized_image_paths = []

for subdir, dirs, files in os.walk(resized_dir):
    for file in files:
        if file.lower().endswith(('.png', '.jpg', '.jpeg')):
            resized_image_paths.append(os.path.join(subdir, file))

print(f"Found {len(resized_image_paths)} resized image files.")

"""## Apply min-max normalization

### Subtask:
Iterate through the loaded resized images and apply Min-Max normalization.

**Reasoning**:
Iterate through the loaded resized image paths, apply Min-Max normalization to each image, and save the normalized images to a new directory while preserving the original subdirectory structure.
"""

import numpy as np
from PIL import Image
import os

normalized_dir = os.path.join(os.path.dirname(resized_dir), 'normalized_images')
os.makedirs(normalized_dir, exist_ok=True)

for image_path in resized_image_paths:
    try:
        img = Image.open(image_path)
        img_array = np.array(img)

        # Apply Min-Max normalization
        min_val = np.min(img_array)
        max_val = np.max(img_array)
        if max_val - min_val != 0:
            normalized_array = (img_array - min_val) / (max_val - min_val)
        else:
            normalized_array = img_array # Avoid division by zero for constant images

        # Convert back to PIL Image, scaling to 0-255 if original was 8-bit
        if img_array.dtype == np.uint8:
             normalized_array = (normalized_array * 255).astype(np.uint8)
        normalized_img = Image.fromarray(normalized_array)


        # Construct save path while preserving subdirectory structure
        relative_path = os.path.relpath(image_path, resized_dir)
        save_path = os.path.join(normalized_dir, relative_path)

        # Ensure the subdirectory for the normalized image exists
        save_subdir = os.path.dirname(save_path)
        os.makedirs(save_subdir, exist_ok=True)

        normalized_img.save(save_path)
    except Exception as e:
        print(f"Error processing image {image_path}: {e}")

print("Image normalization complete.")

"""## Save normalized images

### Subtask:
Save the normalized images to a new directory.

## Summary:

### Data Analysis Key Findings

*   10811 resized image files were found and loaded from the specified directory.
*   Min-Max normalization was successfully applied to each resized image.
*   Normalized images were saved to a new directory named `normalized_images`, preserving the original subdirectory structure.

### Insights or Next Steps

*   The resized and normalized images are now ready to be used as input for a machine learning model.
*   Consider exploring other normalization or standardization techniques based on the specific requirements of the subsequent modeling task.
"""